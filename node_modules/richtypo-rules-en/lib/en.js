"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "shortWords", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.shortWords;
  }
});
Object.defineProperty(exports, "hyphenatedWords", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.hyphenatedWords;
  }
});
Object.defineProperty(exports, "orphans", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.orphans;
  }
});
Object.defineProperty(exports, "abbrs", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.abbrs;
  }
});
Object.defineProperty(exports, "amps", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.amps;
  }
});
Object.defineProperty(exports, "ellipses", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.ellipses;
  }
});
Object.defineProperty(exports, "dashesBasic", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.dashesBasic;
  }
});
Object.defineProperty(exports, "numberUnits", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.numberUnits;
  }
});
Object.defineProperty(exports, "degreeSigns", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.degreeSigns;
  }
});
exports.default = exports.numberSeparators = exports.numberOrdinals = exports.quotes = exports.dashes = exports.dashesAdvanced = exports.prepositions = void 0;

var _richtypoRulesCommon = require("richtypo-rules-common");

const {
  punctuation,
  punctuationOrQuote,
  endash,
  emdash,
  dash,
  space,
  nbsp,
  hairspace,
  tag,
  notInTag
} = _richtypoRulesCommon.definitions;
const thousandsSeparator = ',';
const decimalsSeparator = '[.]';
const ordinal = '(st|nd|rd|th)';
const preposition = 'and|the|for';
const openingQuote = '“';
const closingQuote = '”'; // Prepositions

const prepositions = text => text.replace(new RegExp(`${notInTag}(?<=^|${space}|${punctuationOrQuote}|>)(${preposition}(${tag})?)${space}`, 'gmi'), `$1${nbsp}`);

exports.prepositions = prepositions;

const dashesAdvanced = text => text // Add hair space between , or ) and a dash
.replace(new RegExp(`(${punctuation})${dash}(${space}?)`, 'gmi'), `$1${hairspace}${emdash}$2`) // Add hair space between a tag and a dash
.replace(new RegExp(`(?<!\\s)(${tag})${dash}(${space}?)`, 'gmi'), `$1${hairspace}${emdash}$2`) // Wrap in <nobr> emdash and preceeding word
.replace(new RegExp(`([^\\s\\]\\)\\>]+)${space}?[${endash}${emdash}]${space}?`, 'gmi'), `<nobr>$1${hairspace}${emdash}</nobr>${hairspace}`) // Add hair spaces before and after an em dash
.replace(new RegExp(`${space}[${endash}${emdash}]${space}`, 'gmi'), `${hairspace}${emdash}${hairspace}`);

exports.dashesAdvanced = dashesAdvanced;
const dashes = [_richtypoRulesCommon.dashesBasic, dashesAdvanced];
exports.dashes = dashes;
const quotes = (0, _richtypoRulesCommon.quotesFactory)({
  openingQuote,
  closingQuote
});
exports.quotes = quotes;
const numberOrdinals = (0, _richtypoRulesCommon.numberOrdinalsFactory)({
  ordinal
});
exports.numberOrdinals = numberOrdinals;
const numberSeparators = (0, _richtypoRulesCommon.numberSeparatorsFactory)({
  thousandsSeparator,
  decimalsSeparator
});
exports.numberSeparators = numberSeparators;
// TODO: export defs
// Not in recommended:
// - amps
// - numberOrdinals
// - numberSeparators - breaks years, like "1920"
const recommended = [// Common rules
_richtypoRulesCommon.shortWords, _richtypoRulesCommon.hyphenatedWords, prepositions, _richtypoRulesCommon.orphans, _richtypoRulesCommon.abbrs, dashes, _richtypoRulesCommon.ellipses, _richtypoRulesCommon.numberUnits, _richtypoRulesCommon.degreeSigns, // Custom rules
quotes];
var _default = recommended;
exports.default = _default;