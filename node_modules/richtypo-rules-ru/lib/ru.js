"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "numberUnits", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.numberUnits;
  }
});
Object.defineProperty(exports, "degreeSigns", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.degreeSigns;
  }
});
Object.defineProperty(exports, "shortWords", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.shortWords;
  }
});
Object.defineProperty(exports, "orphans", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.orphans;
  }
});
Object.defineProperty(exports, "abbrs", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.abbrs;
  }
});
Object.defineProperty(exports, "ellipses", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.ellipses;
  }
});
Object.defineProperty(exports, "dashesBasic", {
  enumerable: true,
  get: function () {
    return _richtypoRulesCommon.dashesBasic;
  }
});
exports.default = exports.numberSeparators = exports.quotes = exports.particles = exports.hyphenatedWords = exports.initials = exports.sectionSigns = exports.numberSigns = exports.etcs = exports.dashes = exports.dashesAdvanced = void 0;

var _richtypoRulesCommon = require("richtypo-rules-common");

const {
  notInTag,
  space,
  nbsp,
  hairspace,
  endash,
  emdash,
  dash,
  punctuation
} = _richtypoRulesCommon.definitions;
const thousandsSeparator = hairspace;
const decimalsSeparator = ',';
const openingQuote = '«';
const closingQuote = '»';
const particle = 'б|бы|ж|же|ли|ль';

const dashesAdvanced = text => text // Replace - at the beginnning of a line or right after a tag with em dash
.replace(new RegExp(`^[-${endash}](${space})`, 'gmi'), `${emdash}$1`) // Add non-braking space between , or ) and a dash
.replace(new RegExp(`(${punctuation})${dash}(${space})`, 'gmi'), `$1${nbsp}${emdash}$2`) // Add non-breaking space in front of a dash
.replace(new RegExp(`${notInTag}(\\S)${space}?[${endash}${emdash}]`, 'gmi'), `$1${nbsp}${emdash}`);

exports.dashesAdvanced = dashesAdvanced;
const dashes = [_richtypoRulesCommon.dashesBasic, dashesAdvanced]; // Spaces inside "и т. д." and "и т. п."

exports.dashes = dashes;

const etcs = text => text.replace(new RegExp(`и${space}т\\.${space}д\\.`, 'gi'), `и${nbsp}т.${nbsp}д.`).replace(new RegExp(`и${space}т\\.${space}п\\.`, 'gi'), `и${nbsp}т.${nbsp}п.`); // Spaces inside "№ N"


exports.etcs = etcs;

const numberSigns = text => text.replace(new RegExp(`№${space}`, 'g'), `№${nbsp}`); // Spaces inside "§ N"


exports.numberSigns = numberSigns;

const sectionSigns = text => text.replace(new RegExp(`§${space}`, 'g'), `§${nbsp}`); // Nowrap ("В. И. Ленин")


exports.sectionSigns = sectionSigns;

const initials = text => text.replace(/((?:[А-ЯЁ]\.\s){1,2}[А-ЯЁ][а-яё]+)/g, `<nobr>$1</nobr>`); // Nowrap short words with a hyphen ("из-за")


exports.initials = initials;

const hyphenatedWords = text => text.replace(/([^а-яёА-ЯЁ]|^)((?:[а-яёА-ЯЁ]{1,2}(?:-[а-яёА-ЯЁ]+))|(?:[а-яёА-ЯЁ]+(?:-[а-яёА-ЯЁ]{1,2})))(?![-а-яёА-ЯЁ])/g, `$1<nobr>$2</nobr>`); // Particles


exports.hyphenatedWords = hyphenatedWords;

const particles = text => text.replace(new RegExp(`([а-яёА-ЯЁ]) (${particle})(?=[?!,.:;"‘“»])`, 'g'), `$1${nbsp}$2`).replace(new RegExp(`([а-яёА-ЯЁ])${space}(${particle})${space}`, 'g'), `$1${nbsp}$2 `);

exports.particles = particles;
const quotes = (0, _richtypoRulesCommon.quotesFactory)({
  openingQuote,
  closingQuote
});
exports.quotes = quotes;
const numberSeparators = (0, _richtypoRulesCommon.numberSeparatorsFactory)({
  thousandsSeparator,
  decimalsSeparator
});
exports.numberSeparators = numberSeparators;
// TODO: export defs
// Not in recommended:
// - numberSeparators - breaks years, like "1920"
const recommended = [// Common rules
_richtypoRulesCommon.numberUnits, _richtypoRulesCommon.shortWords, _richtypoRulesCommon.orphans, _richtypoRulesCommon.abbrs, _richtypoRulesCommon.ellipses, quotes, _richtypoRulesCommon.degreeSigns, // Custom rules
etcs, numberSigns, sectionSigns, initials, hyphenatedWords, particles, dashes];
var _default = recommended;
exports.default = _default;