"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quotesFactory = exports.numberSeparatorsFactory = exports.numberOrdinalsFactory = exports.dashesBasic = exports.hyphenatedWords = exports.abbrs = exports.amps = exports.ellipses = exports.degreeSigns = exports.numberUnits = exports.orphans = exports.shortWords = exports.definitions = void 0;
const nbsp = '\xA0';
const hairspace = '\xAF';
const space = `[ \t${nbsp}${hairspace}]`;
const tag = '(?:<[^<>]*>)';
const quote = '["“”«»‘’]';
const letter = '[a-zà-ž0-9а-яё]';
const letterOrHyphen = '[-a-zà-ž0-9а-яё]';
const notLetterOrHyphen = '[^-a-zà-ž0-9а-яё]';
const upperLetter = '[A-ZÀ-ŽdА-ЯЁ]';
const letterOrQuote = `[-“”‘’«»a-zà-ž0-9а-яё]`;
const punctuation = `[.,!?:;)(]`;
const punctuationOrQuote = `[.,!?:;)("“”«»‘’]`;
const endash = '–';
const emdash = '—';
const dash = `[-${endash}${emdash}]`;
const openingQuote = `[“‘«]`;
const shortWord = `${letter}{1,2}`;
const notInTag = `(?<!<[^>]*)`;
const definitions = {
  nbsp,
  hairspace,
  space,
  tag,
  quote,
  letter,
  upperLetter,
  letterOrQuote,
  punctuation,
  punctuationOrQuote,
  endash,
  emdash,
  dash,
  openingQuote,
  shortWord,
  notInTag
}; // Non-breaking space after short words

exports.definitions = definitions;

const shortWords = text => text.replace(new RegExp(`${notInTag}(?<=^|${space}|${punctuationOrQuote}|>)(${shortWord}(${tag})?)${space}`, 'gmi'), `$1${nbsp}`); // Orphans (non-breaking space before the last word)


exports.shortWords = shortWords;

const orphans = text => text.replace(new RegExp(`${notInTag}(?<!\\#)${space}([\\S<]{1,10}(?:\n\n|$))`, 'gmi'), `${nbsp}$1`);

exports.orphans = orphans;

const numberUnits = text => text.replace(new RegExp(`${notInTag}(\\d+${tag}?)${space}(\\w)`, 'gmi'), `$1${nbsp}$2`);

exports.numberUnits = numberUnits;

const degreeSigns = text => text.replace(new RegExp(`${notInTag}(\\d${tag}?)${space}?°`, 'gmi'), `$1${hairspace}°`);

exports.degreeSigns = degreeSigns;

const ellipses = text => text.replace(new RegExp(`${notInTag}\\.{2,}`, 'gmi'), `…`);

exports.ellipses = ellipses;

const amps = text => text.replace(new RegExp(`${notInTag}${space}(&(?!\\S*;))${space}`, 'gmi'), `${nbsp}<span class="amp">&</span>${nbsp}`);

exports.amps = amps;

const abbrs = text => text.replace(new RegExp(`${notInTag}(${upperLetter}{3,})`, 'gm'), `<abbr>$1</abbr>`); // Nowrap short words with a hyphen ("из-за")


exports.abbrs = abbrs;

const hyphenatedWords = text => text.replace(new RegExp(`(${notLetterOrHyphen}|^)((?:${letter}{1,2}(?:-${letter}+))|(?:${letter}+(?:-${letter}{1,2})))(?!${letterOrHyphen})`, 'gi'), `$1<nobr>$2</nobr>`);

exports.hyphenatedWords = hyphenatedWords;

const dashesBasic = text => text // Replace -- or --- with em dash
.replace(new RegExp(`${notInTag}(?<!\n)---?(?!\n)`, 'gmi'), emdash) // Replace - with em dash if there's a space or a tag before and a space after it
.replace(new RegExp(`(${space}|${tag})[-${endash}](${space})`, 'gmi'), `$1${emdash}$2`);

exports.dashesBasic = dashesBasic;

const numberOrdinalsFactory = ({
  ordinal
}) => text => text.replace(new RegExp(`${notInTag}(\\d+)(${ordinal})`, 'gmi'), `$1<sup>$2</sup>`);

exports.numberOrdinalsFactory = numberOrdinalsFactory;

const numberSeparatorsFactory = ({
  decimalsSeparator,
  thousandsSeparator
}) => text => text.replace(new RegExp(`(?<!${decimalsSeparator}\\d*)\\d{1,3}(?=(\\d{3})+(?!\\d))`, 'gmi'), `$&${thousandsSeparator}`);

exports.numberSeparatorsFactory = numberSeparatorsFactory;

const quotesFactory = ({
  openingQuote,
  closingQuote
}) => text => text.replace(new RegExp(`${notInTag}"((${tag})?(${dash}${space})?${letter})`, 'gmi'), `${openingQuote}$1`).replace(new RegExp(`${notInTag}"`, 'gmi'), `${closingQuote}`);

exports.quotesFactory = quotesFactory;